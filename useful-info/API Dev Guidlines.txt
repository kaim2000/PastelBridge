# API Load Reduction Instructions for Pastel Bridge.

## Introduction

Pastel Bridge is being used to serve data from the company Desktop Accounting system (Pastel) to the company's CRM. The CRM requests data via the API on a scheduled basis and stores it in staging tables in the CRM to then serve to CRM users as needed.

## Core Principles
- **Pastel users take priority** - The API must not interfere with desktop accounting operations
- **Slow is acceptable** - Better to have a slow API than impact Pastel performance
- **Scheduled syncs only** - No real-time queries needed since CRM maintains its own copy

## Required Changes

### 1. Connection Pool Configuration
- **Reduce max connections to 1** - Single connection prevents resource competition
- **Set aggressive timeouts (5-10 seconds)** - Fail fast if Pastel is busy
- **Add connection acquire timeout (100ms)** - Don't wait for connections, return 503 immediately


### 3. Aggressive Rate Limiting
- **Reduce request limits to 10-20 per minute** - Current 60/min is too high
- **Add inter-request delays** - Minimum 500ms between database queries

### 4. Pagination Controls
- **Reduce max page size to 50-100 records** - Current 5000 is too large
- **Make pagination mandatory** - No option to retrieve all records at once
- **Use cursor-based pagination** - More efficient than offset for large datasets
- **Return consistent page sizes** - Helps CRM predict sync duration

### 5. Query Optimization
- **Select only required columns** - Don't use SELECT *
- **Add NOLOCK hints where safe** - Reduce lock contention for read queries
- **Order by indexed columns** - Use DocumentNumber not DocumentDate for sorting
- **Avoid complex joins** - Break into multiple simple queries if needed

### 7. Monitoring and Circuit Breakers
- **Log query execution time** - Alert if queries exceed 1-2 seconds
- **Implement circuit breaker** - Temporarily disable API if Pastel response times degrade

### 8. API Response Changes
- **Always include sync metadata** - Timestamp, record count, next cursor, estimated remaining
- **Add warning headers** - X-Load-High, X-Retry-After, X-Preferred-Schedule
- **Return partial results on timeout** - Better than failing entire request

### 9. Configuration Recommendations
- **Make all limits configurable via environment variables** - Easy runtime adjustments
- **Add kill switch** - Emergency API disable without stopping service
- **Implement request priority** - Historical data = low priority, recent data = medium priority
- **Document impact** - Clear warnings about performance implications of each endpoint

## What NOT to Do
- Don't implement caching (unnecessary given architecture)
- Don't increase connection pools
- Don't allow arbitrary date ranges
- Don't optimize for speed over stability
- Don't run multiple workers